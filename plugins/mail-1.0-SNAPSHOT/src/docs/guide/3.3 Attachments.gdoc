The mail plugin is capable of adding attachments to messages as independent files and inline resources. To enable attachment support, you *MUST* indicate that the message is to be _multipart_ as the *first* thing you do in the mail DSL.

{code}
sendMail {
    multipart true
}
{code}

h3. File Attachments

The term file attachments here refers to the attachment being received as a file, not necessarily using a file in your application to form the attachment.

The following methods are available in the mail DSL to attach files…

{code}
// Bytes
attach(String fileName, String contentType, byte[] bytes)

// Files
attach(File file)
attach(String fileName, File file)
attach(String fileName, String contentType, File file)

// InputStream
attach(String fileName, String contentType, InputStreamSource source)
{code}

There are 3 things that need to be provided when creating a file attachment:

* file name - what the email client will call the file
* content type - what mime type the email client will treat the file as
* content source - the actual attachment

The mail plugin supports using either a @byte\[\]@, @File@, or "@InputStreamSource@":http://static.springsource.org/spring/docs/current/api/org/springframework/core/io/InputStreamSource.html as the content source.

In the case of the variants that take a @File@ that do not specify a file name, the name of the file will be used.

In the case of the variants that take a @File@ that do not specify a content type, the content type will be guessed based on the file extension.

{code}
sendMail {
    mutipart true
    to "someone@org.com"
    attach "yourfile.txt", "text/plain", "Hello!" as byte[]
}
{code}

h3. Inline Attachments

It is also possible to attach content as inline resources. This is particularly useful in the case of html email where you wish to embed images in the message. In this case you specify a _content id_ instead of a file name for the attachment and then reference this content id in your mail message.

To attach an image as an inline resource you could do…

{code}
sendMail {
    mutipart true
    to "someone@org.com"
    inline "logo", "image/jpeg", new File("logo.jpg")
    html view: "/email/welcome"
}
{code}

Then in your view you reference the inline attachment using the @cid:@ (content id) namespace…

{code}
<html>
  <body>
    <img src='cid:logo' />
    <p>Welcome Aboard!</p>
  </body>
</html>
{code}

The following methods are available in the mail DSL to attach files…

{code}
// Bytes
inline(String fileName, String contentType, byte[] bytes)

// Files
inline(File file)
inline(String fileName, File file)
inline(String fileName, String contentType, File file)

// InputStream
inline(String fileName, String contentType, InputStreamSource source)
{code}

There are 3 things that need to be provided when creating an inline attachment:

* content id - the identifier of the resource
* content type - what mime type the email client will treat the content as
* content source - the actual content

The mail plugin supports using either a @byte\[\]@, @File@, or "@InputStreamSource@":http://static.springsource.org/spring/docs/current/api/org/springframework/core/io/InputStreamSource.html as the content source.

In the case of the variants that take a @File@ that do not specify a content id, the name of the file will be used.

In the case of the variants that take a @File@ that do not specify a content type, the content type will be guessed based on the file extension.